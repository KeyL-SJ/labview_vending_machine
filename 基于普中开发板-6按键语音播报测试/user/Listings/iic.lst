C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Objects\iic.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\driver\iic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\sys;..\driver) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\iic.lst) TABS(2) OBJECT(.\Objects\iic.obj)

line level    source

   1          #include <iic.h>
   2          
   3          sbit scl = P2 ^ 1; // I2C  时钟
   4          sbit sda = P2 ^ 0; // I2C  数据
   5          bit ack;           /*应答标志位*/
   6          
   7          /*------------------------------------------------
   8                            延时函数
   9          ------------------------------------------------*/
  10          void delay(int i)
  11          {
  12   1        int j, k;
  13   1        for (j = i; j > 0; j--)
  14   1          for (k = 150; k > 0; k--)
  15   1            ;
  16   1      }
  17          
  18          /*******************************************************************
  19                               起动总线函数
  20          函数原型: void  Start_I2c();
  21          功能:     启动I2C总线,即发送I2C起始条件.
  22          ********************************************************************/
  23          void Start_I2c()
  24          {
  25   1        sda = 1; /*发送起始条件的数据信号*/
  26   1        _nop_();
  27   1        scl = 1;
  28   1        _nop_(); /*起始条件建立时间大于4.7us,延时*/
  29   1        _nop_();
  30   1        _nop_();
  31   1        _nop_();
  32   1        _nop_();
  33   1        sda = 0; /*发送起始信号*/
  34   1        _nop_(); /* 起始条件锁定时间大于4μs*/
  35   1        _nop_();
  36   1        _nop_();
  37   1        _nop_();
  38   1        _nop_();
  39   1        scl = 0; /*钳住I2C总线，准备发送或接收数据 */
  40   1        _nop_();
  41   1        _nop_();
  42   1      }
  43          
  44          /*******************************************************************
  45                                结束总线函数
  46          函数原型: void  Stop_I2c();
  47          功能:     结束I2C总线,即发送I2C结束条件.
  48          ********************************************************************/
  49          void Stop_I2c()
  50          {
  51   1        sda = 0; /*发送结束条件的数据信号*/
  52   1        _nop_(); /*发送结束条件的时钟信号*/
  53   1        scl = 1; /*结束条件建立时间大于4μs*/
  54   1        _nop_();
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 2   

  55   1        _nop_();
  56   1        _nop_();
  57   1        _nop_();
  58   1        _nop_();
  59   1        sda = 1; /*发送I2C总线结束信号*/
  60   1        _nop_();
  61   1        _nop_();
  62   1        _nop_();
  63   1        _nop_();
  64   1      }
  65          
  66          /*******************************************************************
  67                           字节数据发送函数
  68          函数原型: void  I2C_SendByte(UCHAR c);
  69          功能:     将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  70                    此状态位进行操作.(不应答或非应答都使ack=0)
  71                     发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  72          ********************************************************************/
  73          void I2C_SendByte(unsigned char c)
  74          {
  75   1        unsigned char i;
  76   1      
  77   1        for (i = 0; i < 8; i++) /*要传送的数据长度为8位*/
  78   1        {
  79   2          if ((c << i) & 0x80)
  80   2            sda = 1; /*判断发送位*/
  81   2          else
  82   2            sda = 0;
  83   2          _nop_();
  84   2          scl = 1; /*置时钟线为高，通知被控器开始接收数据位*/
  85   2          _nop_();
  86   2          _nop_(); /*保证时钟高电平周期大于4μs*/
  87   2          _nop_();
  88   2          _nop_();
  89   2          _nop_();
  90   2          scl = 0;
  91   2        }
  92   1        _nop_();
  93   1        _nop_();
  94   1        _nop_();
  95   1        _nop_();
  96   1        sda = 1; /*8位发送完后释放数据线，准备接收应答位*/
  97   1        _nop_();
  98   1        _nop_();
  99   1        _nop_();
 100   1        _nop_();
 101   1        scl = 1;
 102   1        _nop_();
 103   1        _nop_();
 104   1        _nop_();
 105   1        if (sda == 1)
 106   1          ack = 0;
 107   1        else
 108   1          ack = 1; /*判断是否接收到应答信号*/
 109   1        scl = 0;
 110   1        _nop_();
 111   1        _nop_();
 112   1      }
 113          
 114          /*******************************************************************
 115                           字节数据接收函数
 116          函数原型: UCHAR  I2C_RcvByte();
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 3   

 117          功能:        用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
 118                    发完后请用应答函数应答从机。
 119          ********************************************************************/
 120          unsigned char I2C_RcvByte()
 121          {
 122   1        unsigned char retc = 0, i = 0;
 123   1        sda = 1; /*置数据线为输入方式*/
 124   1        for (i = 0; i < 8; i++)
 125   1        {
 126   2          _nop_();
 127   2          scl = 0; /*置时钟线为低，准备接收数据位*/
 128   2          _nop_();
 129   2          _nop_(); /*时钟低电平周期大于4.7μs*/
 130   2          _nop_();
 131   2          _nop_();
 132   2          _nop_();
 133   2          scl = 1; /*置时钟线为高使数据线上数据有效*/
 134   2          _nop_();
 135   2          _nop_();
 136   2          retc = retc << 1;
 137   2          if (sda == 1)
 138   2            retc = retc + 1; /*读数据位,接收的数据位放入retc中 */
 139   2          _nop_();
 140   2          _nop_();
 141   2        }
 142   1        scl = 0;
 143   1        _nop_();
 144   1        _nop_();
 145   1        return (retc);
 146   1      }
 147          
 148          /********************************************************************
 149                               应答子函数
 150          函数原型:  void Ack_I2c(bit a);
 151          功能:      主控器进行应答信号(可以是应答或非应答信号，由位参数a决定)
 152          ********************************************************************/
 153          void Ack_I2c(bit a)
 154          {
 155   1        if (a == 0)
 156   1          sda = 0; /*在此发出应答或非应答信号 */
 157   1        else
 158   1          sda = 1; /*0为发出应答，1为非应答信号 */
 159   1        _nop_();
 160   1        _nop_();
 161   1        _nop_();
 162   1        scl = 1;
 163   1        _nop_();
 164   1        _nop_(); /*时钟低电平周期大于4μs*/
 165   1        _nop_();
 166   1        _nop_();
 167   1        _nop_();
 168   1        scl = 0; /*清时钟线，住I2C总线以便继续接收*/
 169   1        _nop_();
 170   1        _nop_();
 171   1      }
 172          
 173          bit I2C_ByteWrite(unsigned char dat)
 174          {
 175   1        Start_I2c();            //启动总线
 176   1        I2C_SendByte(I2C_ADDR); //发送器件地址
 177   1        if (ack == 0)
 178   1          return (0);
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 4   

 179   1        I2C_SendByte(dat); //发送数据
 180   1        if (ack == 0)
 181   1          return (0);
 182   1        Stop_I2c(); //结束总线
 183   1        delay(10);
 184   1        return (1);
 185   1      }
 186          
 187          
 188          
 189          void I2C_Writes_Bytes(unsigned char *buff, int number)
 190          {
 191   1        int i;
 192   1        for (i = 0; i < number; i++)
 193   1        {
 194   2          I2C_ByteWrite(buff[i]);
 195   2        }
 196   1      }
 197          
 198          unsigned char GetChipStatus()
 199          {
 200   1        unsigned char dat = 0xff;
 201   1        unsigned char *pBuffer = 0xff;
 202   1        unsigned char AskState[4] = {0xFD, 0x00, 0x01, 0x21};
 203   1      
 204   1        I2C_Writes_Bytes(AskState, 4);
 205   1        delay(100);
 206   1      
 207   1        Start_I2c();                //启动总线
 208   1        I2C_SendByte(I2C_ADDR + 1); //发送器件地址
 209   1        if (ack == 0)
 210   1          return (0);
 211   1        delay(5);            //必须加一点延时
 212   1        dat = I2C_RcvByte(); //读取数据
 213   1      
 214   1        Ack_I2c(1); //发送非应答信号
 215   1        Stop_I2c(); //结束总线
 216   1        return (dat);
 217   1      }
 218          
 219          void speech_text(u8 *str, u8 encoding_format)
 220          {
 221   1        u16 size = strlen(str) + 2;
 222   1      
 223   1        XFS_Protocol_TypeDef DataPack;
 224   1      
 225   1        DataPack.DataHead = DATAHEAD;
 226   1        DataPack.Length_HH = size >> 8;
 227   1        DataPack.Length_LL = size;
 228   1        DataPack.Commond = 0x01;
 229   1        DataPack.EncodingFormat = encoding_format;
 230   1        DataPack.Text = str;
 231   1      
 232   1        I2C_ByteWrite(DataPack.DataHead);
 233   1        I2C_ByteWrite(DataPack.Length_HH);
 234   1        I2C_ByteWrite(DataPack.Length_LL);
 235   1        I2C_ByteWrite(DataPack.Commond);
 236   1        I2C_ByteWrite(DataPack.EncodingFormat);
 237   1      
 238   1        I2C_Writes_Bytes(DataPack.Text, strlen(DataPack.Text));
 239   1      }
 240          
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 5   

 241          void SetBase(u8 *str)
 242          {
 243   1        u16 size = strlen(str) + 2;
 244   1      
 245   1        XFS_Protocol_TypeDef DataPack;
 246   1      
 247   1        DataPack.DataHead = DATAHEAD;
 248   1        DataPack.Length_HH = size >> 8;
 249   1        DataPack.Length_LL = size;
 250   1        DataPack.Commond = 0x01;
 251   1        DataPack.EncodingFormat = 0x00;
 252   1        DataPack.Text = str;
 253   1      
 254   1        I2C_ByteWrite(DataPack.DataHead);
 255   1        I2C_ByteWrite(DataPack.Length_HH);
 256   1        I2C_ByteWrite(DataPack.Length_LL);
 257   1        I2C_ByteWrite(DataPack.Commond);
 258   1        I2C_ByteWrite(DataPack.EncodingFormat);
 259   1      
 260   1        I2C_Writes_Bytes(DataPack.Text, strlen(DataPack.Text));
 261   1      }
 262          
 263          void TextCtrl(char c, int d)
 264          {
 265   1        char str[10];
 266   1        if (d != -1)
 267   1          sprintf(str, "[%c%d]", c, d);
 268   1        else
 269   1          sprintf(str, "[%c]", c);
 270   1        SetBase(str);
 271   1      }
 272          
 273          void SetStyle(Style_Type style)
 274          {
 275   1        TextCtrl('f', style);
 276   1        while (GetChipStatus() != ChipStatus_Idle)
 277   1        {
 278   2          delay(10);
 279   2        }
 280   1      }
 281          
 282          void SetLanguage(Language_Type language)
 283          {
 284   1        TextCtrl('g', language);
 285   1        while (GetChipStatus() != ChipStatus_Idle)
 286   1        {
 287   2          delay(10);
 288   2        }
 289   1      }
 290          
 291          void SetArticulation(Articulation_Type articulation)
 292          {
 293   1        TextCtrl('h', articulation);
 294   1        while (GetChipStatus() != ChipStatus_Idle)
 295   1        {
 296   2          delay(10);
 297   2        }
 298   1      }
 299          
 300          void SetSpell(Spell_Type spell)
 301          {
 302   1        TextCtrl('i', spell);
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 6   

 303   1        while (GetChipStatus() != ChipStatus_Idle)
 304   1        {
 305   2          delay(10);
 306   2        }
 307   1      }
 308          
 309          void SetReader(Reader_Type reader)
 310          {
 311   1        TextCtrl('m', reader);
 312   1        while (GetChipStatus() != ChipStatus_Idle)
 313   1        {
 314   2          delay(10);
 315   2        }
 316   1      }
 317          
 318          void SetNumberHandle(NumberHandle_Type numberHandle)
 319          {
 320   1        TextCtrl('n', numberHandle);
 321   1        while (GetChipStatus() != ChipStatus_Idle)
 322   1        {
 323   2          delay(10);
 324   2        }
 325   1      }
 326          
 327          void SetZeroPronunciation(ZeroPronunciation_Type zeroPronunciation)
 328          {
 329   1        TextCtrl('o', zeroPronunciation);
 330   1        while (GetChipStatus() != ChipStatus_Idle)
 331   1        {
 332   2          delay(10);
 333   2        }
 334   1      }
 335          
 336          void SetNamePronunciation(NamePronunciation_Type namePronunciation)
 337          {
 338   1        TextCtrl('r', namePronunciation);
 339   1        while (GetChipStatus() != ChipStatus_Idle)
 340   1        {
 341   2          delay(10);
 342   2        }
 343   1      }
 344          
 345          void SetSpeed(int speed)
 346          {
 347   1        TextCtrl('s', speed);
 348   1      }
 349          
 350          void SetIntonation(int intonation)
 351          {
 352   1        TextCtrl('t', intonation);
 353   1        while (GetChipStatus() != ChipStatus_Idle)
 354   1        {
 355   2          delay(10);
 356   2        }
 357   1      }
 358          
 359          void SetVolume(int volume)
 360          {
 361   1        TextCtrl('v', volume);
 362   1        while (GetChipStatus() != ChipStatus_Idle)
 363   1        {
 364   2          delay(10);
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 7   

 365   2        }
 366   1      }
 367          
 368          void SetOnePronunciation(OnePronunciation_Type onePronunciation)
 369          {
 370   1        TextCtrl('y', onePronunciation);
 371   1        while (GetChipStatus() != ChipStatus_Idle)
 372   1        {
 373   2          delay(10);
 374   2        }
 375   1      }
 376          
 377          void SetRhythm(Rhythm_Type rhythm)
 378          {
 379   1        TextCtrl('z', rhythm);
 380   1        while (GetChipStatus() != ChipStatus_Idle)
 381   1        {
 382   2          delay(10);
 383   2        }
 384   1      }
 385          
 386          void SetRestoreDefault()
 387          {
 388   1        TextCtrl('d', -1);
 389   1        while (GetChipStatus() != ChipStatus_Idle)
 390   1        {
 391   2          delay(10);
 392   2        }
 393   1      }
 394          
 395          void speech_init(void)
 396          {
 397   1        SetVolume(10);
 398   1        SetReader(Reader_XiaoPing);
 399   1        speech_text("欢迎来到桂林电子科技大学信息科技学院", GB2312);
 400   1        while (GetChipStatus() != ChipStatus_Idle) //等待芯片空闲
 401   1        {
 402   2          delay(10);
 403   2        }
 404   1      
 405   1        SetReader(Reader_XuDuo);
 406   1        speech_text("请问您需要点什么呢", GB2312);
 407   1        while (GetChipStatus() != ChipStatus_Idle) //等待芯片空闲
 408   1        {
 409   2          delay(10);
 410   2        }
 411   1      }
 412          
 413          void User_Speech_Text(unsigned char *text)
 414          {
 415   1        SetVolume(10);
 416   1        SetReader(Reader_XuDuo);
 417   1        speech_text(text, GB2312);
 418   1        while (GetChipStatus() != ChipStatus_Idle) //等待芯片空闲
 419   1        {
 420   2          delay(10);
 421   2        }
 422   1      }
 423          
 424          bit I2C_ByteWrite_alone(unsigned char date)
 425          {
 426   1      
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 8   

 427   1        Start_I2c();            //启动总线
 428   1        I2C_SendByte(I2C_ADDR_Recognition); //发送器件地址
 429   1        if (ack == 0)
 430   1          return (0);
 431   1        I2C_SendByte(date); //发送数据
 432   1        if (ack == 0)
 433   1          return (0);
 434   1      
 435   1        Stop_I2c(); //结束总线
 436   1      
 437   1        return (1);
 438   1      }
 439          
 440          void I2C_ByteWrite_Recognition(unsigned char reg_addr, unsigned char dat)
 441          {
 442   1        I2C_ByteWrite_alone(reg_addr);
 443   1        I2C_ByteWrite_alone(dat);
 444   1      }
 445          
 446          unsigned char I2C_BufferRead(unsigned char date)
 447          {
 448   1        unsigned char dat;
 449   1        Start_I2c();            //启动总线
 450   1        I2C_SendByte(I2C_ADDR_Recognition); //发送器件地址
 451   1        if (ack == 0)
 452   1          return (0);
 453   1        I2C_SendByte(date); //发送器件地址
 454   1        if (ack == 0)
 455   1          return (0);
 456   1        Stop_I2c();
 457   1        delay(50);
 458   1      
 459   1        Start_I2c();                //启动总线
 460   1        I2C_SendByte(I2C_ADDR_Recognition + 1); //发送器件地址
 461   1        if (ack == 0)
 462   1          return (0);
 463   1        delay(1);
 464   1        dat = I2C_RcvByte(); //读取数据
 465   1      
 466   1        Ack_I2c(1); //发送非应答信号
 467   1        Stop_I2c(); //结束总线
 468   1      
 469   1        return (dat);
 470   1      }
 471          
 472          void AsrAddWords(unsigned char idNum, unsigned char *words)
 473          {
 474   1        int i = 0;
 475   1        unsigned char date_length = strlen(words) + 2;
 476   1        unsigned char str_length = strlen(words);
 477   1        I2C_ByteWrite_alone(ASR_ADD_WORD_ADDR); //发送寄存器地址
 478   1        I2C_ByteWrite_alone(date_length);       //发送数据长度
 479   1        I2C_ByteWrite_alone(idNum);
 480   1        for (i = 0; i < str_length; i++)
 481   1        {
 482   2          I2C_ByteWrite_alone(words[i]);
 483   2        }
 484   1        I2C_ByteWrite_alone(0);
 485   1      }
 486          
 487          void RGB_Set(unsigned char R, unsigned char G, unsigned char B)
 488          {
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 9   

 489   1      
 490   1        I2C_ByteWrite_alone(ASR_RGB_ADDR);
 491   1        I2C_ByteWrite_alone(R);
 492   1        I2C_ByteWrite_alone(G);
 493   1        I2C_ByteWrite_alone(B);
 494   1      }
 495          
 496          /*****************************
 497                 忙闲等待取函数
 498          ******************************/
 499          void BusyWait(void)
 500          {
 501   1      
 502   1        unsigned char busy_flag = 0xff;
 503   1        while (busy_flag != 0)
 504   1        {
 505   2          busy_flag = I2C_BufferRead(ASR_BUSY);
 506   2          delay(500);
 507   2        }
 508   1      }
 509          //语音识别初始化函数
 510          void Recognition_Init(void)
 511          {
 512   1        unsigned char cleck = 0xff;
 513   1      #if 0
                I2C_ByteWrite_Recognition(ASR_CLEAR_ADDR, 0x40); //清除掉电保存区,录入前需要清除掉电保存区
                BusyWait();
                I2C_ByteWrite_Recognition(ASR_MODE_ADDR, 1); //设置模式为口令模式
                BusyWait();
                AsrAddWords(0, "xiao ya");
                BusyWait();
                AsrAddWords(1, "yi hao men");
                BusyWait();
                AsrAddWords(2, "er hao men");
                BusyWait();
                AsrAddWords(3, "sang hao men");
                BusyWait();
                AsrAddWords(4, "si hao men");
                BusyWait();
                AsrAddWords(5, "wu hao men");
                BusyWait();
                AsrAddWords(6, "liu hao men");
                BusyWait();
              
                while (cleck != 10)
                {
                  cleck = I2C_BufferRead(ASR_NUM_CLECK);
                  delay(500);
                }
              #endif
 539   1        I2C_ByteWrite_Recognition(ASR_REC_GAIN, 0x40); //设置灵敏度
 540   1      
 541   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1287    ----
   CONSTANT SIZE    =     72    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      60
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.54   IIC                                                                   05/06/2022 11:43:19 PAGE 10  

   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
