C51 COMPILER V9.54   IIC                                                                   04/16/2022 21:49:31 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Objects\iic.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\driver\iic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\sys;..\driver) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\iic.lst) TABS(2) OBJECT(.\Objects\iic.obj)

line level    source

   1          #include <iic.h>
   2          
   3          sbit scl = P2 ^ 1; //I2C  时钟
   4          sbit sda = P2 ^ 0; //I2C  数据
   5          bit ack;           /*应答标志位*/
   6          
   7          /*------------------------------------------------
   8                            延时函数
   9          ------------------------------------------------*/
  10          void delay(int i)
  11          {
  12   1        int j, k;
  13   1        for (j = i; j > 0; j--)
  14   1          for (k = 150; k > 0; k--)
  15   1            ;
  16   1      }
  17          
  18          /*******************************************************************
  19                               起动总线函数               
  20          函数原型: void  Start_I2c();  
  21          功能:     启动I2C总线,即发送I2C起始条件.  
  22          ********************************************************************/
  23          void Start_I2c()
  24          {
  25   1        sda = 1; /*发送起始条件的数据信号*/
  26   1        _nop_();
  27   1        scl = 1;
  28   1        _nop_(); /*起始条件建立时间大于4.7us,延时*/
  29   1        _nop_();
  30   1        _nop_();
  31   1        _nop_();
  32   1        _nop_();
  33   1        sda = 0; /*发送起始信号*/
  34   1        _nop_(); /* 起始条件锁定时间大于4μs*/
  35   1        _nop_();
  36   1        _nop_();
  37   1        _nop_();
  38   1        _nop_();
  39   1        scl = 0; /*钳住I2C总线，准备发送或接收数据 */
  40   1        _nop_();
  41   1        _nop_();
  42   1      }
  43          
  44          /*******************************************************************
  45                                结束总线函数               
  46          函数原型: void  Stop_I2c();  
  47          功能:     结束I2C总线,即发送I2C结束条件.  
  48          ********************************************************************/
  49          void Stop_I2c()
  50          {
  51   1        sda = 0; /*发送结束条件的数据信号*/
  52   1        _nop_(); /*发送结束条件的时钟信号*/
  53   1        scl = 1; /*结束条件建立时间大于4μs*/
  54   1        _nop_();
C51 COMPILER V9.54   IIC                                                                   04/16/2022 21:49:31 PAGE 2   

  55   1        _nop_();
  56   1        _nop_();
  57   1        _nop_();
  58   1        _nop_();
  59   1        sda = 1; /*发送I2C总线结束信号*/
  60   1        _nop_();
  61   1        _nop_();
  62   1        _nop_();
  63   1        _nop_();
  64   1      }
  65          
  66          /*******************************************************************
  67                           字节数据发送函数               
  68          函数原型: void  I2C_SendByte(UCHAR c);
  69          功能:     将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  70                    此状态位进行操作.(不应答或非应答都使ack=0)     
  71                     发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  72          ********************************************************************/
  73          void I2C_SendByte(unsigned char c)
  74          {
  75   1        unsigned char i;
  76   1      
  77   1        for (i = 0; i < 8; i++) /*要传送的数据长度为8位*/
  78   1        {
  79   2          if ((c << i) & 0x80)
  80   2            sda = 1; /*判断发送位*/
  81   2          else
  82   2            sda = 0;
  83   2          _nop_();
  84   2          scl = 1; /*置时钟线为高，通知被控器开始接收数据位*/
  85   2          _nop_();
  86   2          _nop_(); /*保证时钟高电平周期大于4μs*/
  87   2          _nop_();
  88   2          _nop_();
  89   2          _nop_();
  90   2          scl = 0;
  91   2        }
  92   1        _nop_();
  93   1        _nop_();
  94   1        _nop_();
  95   1        _nop_();
  96   1        sda = 1; /*8位发送完后释放数据线，准备接收应答位*/
  97   1        _nop_();
  98   1        _nop_();
  99   1        _nop_();
 100   1        _nop_();
 101   1        scl = 1;
 102   1        _nop_();
 103   1        _nop_();
 104   1        _nop_();
 105   1        if (sda == 1)
 106   1          ack = 0;
 107   1        else
 108   1          ack = 1; /*判断是否接收到应答信号*/
 109   1        scl = 0;
 110   1        _nop_();
 111   1        _nop_();
 112   1      }
 113          
 114          /*******************************************************************
 115                           字节数据接收函数               
 116          函数原型: UCHAR  I2C_RcvByte();
C51 COMPILER V9.54   IIC                                                                   04/16/2022 21:49:31 PAGE 3   

 117          功能:        用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
 118                    发完后请用应答函数应答从机。  
 119          ********************************************************************/
 120          unsigned char I2C_RcvByte()
 121          {
 122   1        unsigned char retc = 0, i = 0;
 123   1        sda = 1; /*置数据线为输入方式*/
 124   1        for (i = 0; i < 8; i++)
 125   1        {
 126   2          _nop_();
 127   2          scl = 0; /*置时钟线为低，准备接收数据位*/
 128   2          _nop_();
 129   2          _nop_(); /*时钟低电平周期大于4.7μs*/
 130   2          _nop_();
 131   2          _nop_();
 132   2          _nop_();
 133   2          scl = 1; /*置时钟线为高使数据线上数据有效*/
 134   2          _nop_();
 135   2          _nop_();
 136   2          retc = retc << 1;
 137   2          if (sda == 1)
 138   2            retc = retc + 1; /*读数据位,接收的数据位放入retc中 */
 139   2          _nop_();
 140   2          _nop_();
 141   2        }
 142   1        scl = 0;
 143   1        _nop_();
 144   1        _nop_();
 145   1        return (retc);
 146   1      }
 147          
 148          /********************************************************************
 149                               应答子函数
 150          函数原型:  void Ack_I2c(bit a);
 151          功能:      主控器进行应答信号(可以是应答或非应答信号，由位参数a决定)
 152          ********************************************************************/
 153          void Ack_I2c(bit a)
 154          {
 155   1        if (a == 0)
 156   1          sda = 0; /*在此发出应答或非应答信号 */
 157   1        else
 158   1          sda = 1; /*0为发出应答，1为非应答信号 */
 159   1        _nop_();
 160   1        _nop_();
 161   1        _nop_();
 162   1        scl = 1;
 163   1        _nop_();
 164   1        _nop_(); /*时钟低电平周期大于4μs*/
 165   1        _nop_();
 166   1        _nop_();
 167   1        _nop_();
 168   1        scl = 0; /*清时钟线，住I2C总线以便继续接收*/
 169   1        _nop_();
 170   1        _nop_();
 171   1      }
 172          
 173          bit I2C_ByteWrite(unsigned char dat)
 174          {
 175   1        Start_I2c();            //启动总线
 176   1        I2C_SendByte(I2C_ADDR); //发送器件地址
 177   1        if (ack == 0)
 178   1          return (0);
C51 COMPILER V9.54   IIC                                                                   04/16/2022 21:49:31 PAGE 4   

 179   1        I2C_SendByte(dat); //发送数据
 180   1        if (ack == 0)
 181   1          return (0);
 182   1        Stop_I2c(); //结束总线
 183   1        delay(10);
 184   1        return (1);
 185   1      }
 186          
 187          void I2C_Writes_Bytes(unsigned char *buff, int number)
 188          {
 189   1        int i;
 190   1        for (i = 0; i < number; i++)
 191   1        {
 192   2          I2C_ByteWrite(buff[i]);
 193   2        }
 194   1      }
 195          
 196          unsigned char GetChipStatus()
 197          {
 198   1        unsigned char dat = 0xff;
 199   1        unsigned char *pBuffer = 0xff;
 200   1        unsigned char AskState[4] = {0xFD, 0x00, 0x01, 0x21};
 201   1      
 202   1        I2C_Writes_Bytes(AskState, 4);
 203   1        delay(100);
 204   1      
 205   1        Start_I2c();                //启动总线
 206   1        I2C_SendByte(I2C_ADDR + 1); //发送器件地址
 207   1        if (ack == 0)
 208   1          return (0);
 209   1        delay(5);            //必须加一点延时
 210   1        dat = I2C_RcvByte(); //读取数据
 211   1      
 212   1        Ack_I2c(1); //发送非应答信号
 213   1        Stop_I2c(); //结束总线
 214   1        return (dat);
 215   1      }
 216          
 217          void speech_text(u8 *str, u8 encoding_format)
 218          {
 219   1        u16 size = strlen(str) + 2;
 220   1      
 221   1        XFS_Protocol_TypeDef DataPack;
 222   1      
 223   1        DataPack.DataHead = DATAHEAD;
 224   1        DataPack.Length_HH = size >> 8;
 225   1        DataPack.Length_LL = size;
 226   1        DataPack.Commond = 0x01;
 227   1        DataPack.EncodingFormat = encoding_format;
 228   1        DataPack.Text = str;
 229   1      
 230   1        I2C_ByteWrite(DataPack.DataHead);
 231   1        I2C_ByteWrite(DataPack.Length_HH);
 232   1        I2C_ByteWrite(DataPack.Length_LL);
 233   1        I2C_ByteWrite(DataPack.Commond);
 234   1        I2C_ByteWrite(DataPack.EncodingFormat);
 235   1      
 236   1        I2C_Writes_Bytes(DataPack.Text, strlen(DataPack.Text));
 237   1      }
 238          
 239          void SetBase(u8 *str)
 240          {
C51 COMPILER V9.54   IIC                                                                   04/16/2022 21:49:31 PAGE 5   

 241   1        u16 size = strlen(str) + 2;
 242   1      
 243   1        XFS_Protocol_TypeDef DataPack;
 244   1      
 245   1        DataPack.DataHead = DATAHEAD;
 246   1        DataPack.Length_HH = size >> 8;
 247   1        DataPack.Length_LL = size;
 248   1        DataPack.Commond = 0x01;
 249   1        DataPack.EncodingFormat = 0x00;
 250   1        DataPack.Text = str;
 251   1      
 252   1        I2C_ByteWrite(DataPack.DataHead);
 253   1        I2C_ByteWrite(DataPack.Length_HH);
 254   1        I2C_ByteWrite(DataPack.Length_LL);
 255   1        I2C_ByteWrite(DataPack.Commond);
 256   1        I2C_ByteWrite(DataPack.EncodingFormat);
 257   1      
 258   1        I2C_Writes_Bytes(DataPack.Text, strlen(DataPack.Text));
 259   1      }
 260          
 261          void TextCtrl(char c, int d)
 262          {
 263   1        char str[10];
 264   1        if (d != -1)
 265   1          sprintf(str, "[%c%d]", c, d);
 266   1        else
 267   1          sprintf(str, "[%c]", c);
 268   1        SetBase(str);
 269   1      }
 270          
 271          void SetStyle(Style_Type style)
 272          {
 273   1        TextCtrl('f', style);
 274   1        while (GetChipStatus() != ChipStatus_Idle)
 275   1        {
 276   2          delay(10);
 277   2        }
 278   1      }
 279          
 280          void SetLanguage(Language_Type language)
 281          {
 282   1        TextCtrl('g', language);
 283   1        while (GetChipStatus() != ChipStatus_Idle)
 284   1        {
 285   2          delay(10);
 286   2        }
 287   1      }
 288          
 289          void SetArticulation(Articulation_Type articulation)
 290          {
 291   1        TextCtrl('h', articulation);
 292   1        while (GetChipStatus() != ChipStatus_Idle)
 293   1        {
 294   2          delay(10);
 295   2        }
 296   1      }
 297          
 298          void SetSpell(Spell_Type spell)
 299          {
 300   1        TextCtrl('i', spell);
 301   1        while (GetChipStatus() != ChipStatus_Idle)
 302   1        {
C51 COMPILER V9.54   IIC                                                                   04/16/2022 21:49:31 PAGE 6   

 303   2          delay(10);
 304   2        }
 305   1      }
 306          
 307          void SetReader(Reader_Type reader)
 308          {
 309   1        TextCtrl('m', reader);
 310   1        while (GetChipStatus() != ChipStatus_Idle)
 311   1        {
 312   2          delay(10);
 313   2        }
 314   1      }
 315          
 316          void SetNumberHandle(NumberHandle_Type numberHandle)
 317          {
 318   1        TextCtrl('n', numberHandle);
 319   1        while (GetChipStatus() != ChipStatus_Idle)
 320   1        {
 321   2          delay(10);
 322   2        }
 323   1      }
 324          
 325          void SetZeroPronunciation(ZeroPronunciation_Type zeroPronunciation)
 326          {
 327   1        TextCtrl('o', zeroPronunciation);
 328   1        while (GetChipStatus() != ChipStatus_Idle)
 329   1        {
 330   2          delay(10);
 331   2        }
 332   1      }
 333          
 334          void SetNamePronunciation(NamePronunciation_Type namePronunciation)
 335          {
 336   1        TextCtrl('r', namePronunciation);
 337   1        while (GetChipStatus() != ChipStatus_Idle)
 338   1        {
 339   2          delay(10);
 340   2        }
 341   1      }
 342          
 343          void SetSpeed(int speed)
 344          {
 345   1        TextCtrl('s', speed);
 346   1      }
 347          
 348          void SetIntonation(int intonation)
 349          {
 350   1        TextCtrl('t', intonation);
 351   1        while (GetChipStatus() != ChipStatus_Idle)
 352   1        {
 353   2          delay(10);
 354   2        }
 355   1      }
 356          
 357          void SetVolume(int volume)
 358          {
 359   1        TextCtrl('v', volume);
 360   1        while (GetChipStatus() != ChipStatus_Idle)
 361   1        {
 362   2          delay(10);
 363   2        }
 364   1      }
C51 COMPILER V9.54   IIC                                                                   04/16/2022 21:49:31 PAGE 7   

 365          
 366          void SetOnePronunciation(OnePronunciation_Type onePronunciation)
 367          {
 368   1        TextCtrl('y', onePronunciation);
 369   1        while (GetChipStatus() != ChipStatus_Idle)
 370   1        {
 371   2          delay(10);
 372   2        }
 373   1      }
 374          
 375          void SetRhythm(Rhythm_Type rhythm)
 376          {
 377   1        TextCtrl('z', rhythm);
 378   1        while (GetChipStatus() != ChipStatus_Idle)
 379   1        {
 380   2          delay(10);
 381   2        }
 382   1      }
 383          
 384          void SetRestoreDefault()
 385          {
 386   1        TextCtrl('d', -1);
 387   1        while (GetChipStatus() != ChipStatus_Idle)
 388   1        {
 389   2          delay(10);
 390   2        }
 391   1      }
 392          
 393          void speech_init(void)
 394          {
 395   1        SetVolume(10);
 396   1        SetReader(Reader_XiaoPing);
 397   1        speech_text("欢迎来到桂林电子科技大学信息科技学院", GB2312);
 398   1        while (GetChipStatus() != ChipStatus_Idle) //等待芯片空闲
 399   1        {
 400   2          delay(10);
 401   2        }
 402   1      
 403   1        SetReader(Reader_XuDuo);
 404   1        speech_text("我尊贵的顾客请问您需要点什么呢", GB2312);
 405   1        while (GetChipStatus() != ChipStatus_Idle) //等待芯片空闲
 406   1        {
 407   2          delay(10);
 408   2        }
 409   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    985    ----
   CONSTANT SIZE    =     84    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      49
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
